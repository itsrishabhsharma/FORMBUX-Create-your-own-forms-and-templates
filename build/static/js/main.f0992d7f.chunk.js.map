{"version":3,"sources":["redux/reducers/formReducers.js","assets/img/loader.gif","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["formReducer","state","tempState","loading","action","type","forms","localStorage","getItem","JSON","parse","activeFormId","length","push","_id","name","payload","fields","setItem","stringify","setTimeout","history","Object","assign","form","fms","all","module","exports","Landing","React","lazy","Login","FormBase","LiveForm","Container","AuthenRoute","props","cookie","load","to","AnimatedRoutes","useLocation","fallback","className","src","require","path","exact","component","App","Boolean","window","location","hostname","match","rootreducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGACA,kCAIO,IAAMA,EAAY,WAA6C,IAA5CC,EAA2C,uDAArC,CAACC,UAAU,GAAGC,SAAQ,GAAMC,EAAS,uCAEjE,OAAOA,EAAOC,MACV,IAAK,cACD,IAAIC,EAAsC,OAAhCC,aAAaC,QAAQ,SAAgBC,KAAKC,MAAMH,aAAaC,QAAQ,UAAU,GACnFG,EAAaL,EAAMM,OAAO,EAMhC,OALAN,EAAMO,KAAK,CAACC,IAAIH,EAAaI,KAAKX,EAAOY,QAAQD,KAAKE,OAAO,KAC7DV,aAAaW,QAAQ,QAAQT,KAAKU,UAAUb,IAC5Cc,YAAW,WACPhB,EAAOY,QAAQK,QAAQR,KAAK,SAASF,KACvC,KACKW,OAAOC,OAAO,GAAGtB,EAAM,IAElC,IAAK,UAGL,IAAK,UAED,OAAOqB,OAAOC,OAAO,GAAGtB,EAAM,CAACuB,KAAKpB,EAAOY,UAE/C,IAAK,cACD,IAAIS,EAAIrB,EAAOY,QAAQV,MAEvB,OADAC,aAAaW,QAAQ,QAAQT,KAAKU,UAAUM,IACrCH,OAAOC,OAAO,GAAGtB,EAAM,CAACyB,IAAID,EAAItB,SAAQ,IACnD,QACI,OAAOF,K,mBC9BnB0B,EAAOC,QAAU,IAA0B,oC,sNCkBrCC,EAAUC,IAAMC,MAAK,kBAAI,kCACzBC,EAAOF,IAAMC,MAAK,kBAAI,wDACtBE,EAAUH,IAAMC,MAAK,kBAAI,yDACzBG,EAAUJ,IAAMC,MAAK,kBAAI,sEACzBI,EAAWL,IAAMC,MAAK,kBAAI,8EAkBhC,IAAMK,EAAY,SAACC,GAClB,OAAOC,IAAOC,KAAK,SAAS,kBAAC,IAAUF,GAAU,kBAAC,IAAD,CAAUG,GAAG,YAG/D,SAASC,IACQC,cAEf,OAaU,kBAAC,WAAD,CAAUC,SAAU,yBAAKC,UAAU,cAAa,yBAAKC,IAAKC,EAAQ,QAC/D,kBAAC,IAAD,KACD,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,SAASC,OAAK,EAACC,UAAWjB,IACtC,kBAAC,EAAD,CAAae,KAAK,QAAQC,OAAK,EAACC,UAAWhB,IAC3C,kBAAC,EAAD,CAAac,KAAK,YAAYC,OAAK,EAACC,UAAWhB,IAC/C,kBAAC,IAAD,CAAOc,KAAK,YAAYC,OAAK,EAACC,UAAWf,IACzC,kBAAC,IAAD,CAAOa,KAAK,UAAUC,OAAK,EAACC,UAAWd,MAWtCe,MAtDf,WACE,OACE,kBAAC,IAAD,KACQ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOH,KAAK,IAAIC,OAAK,GACnB,kBAACP,EAAD,UCjBIU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CCbAC,EAAaC,0BAAgB,CAACzD,kBACvB0D,EAAMC,sBAAYH,EAAaI,8BAAoBC,0BAAgBC,OCEhFC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,QAGJQ,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0992d7f.chunk.js","sourcesContent":["\nimport { message } from 'antd';\n\n\n\nexport const formReducer=(state={tempState:[],loading:true},action)=>{\n\n    switch(action.type){\n        case 'create_form':\n            let forms=localStorage.getItem('forms')!==null?JSON.parse(localStorage.getItem('forms')):[];\n            const activeFormId=forms.length+1;\n            forms.push({_id:activeFormId,name:action.payload.name,fields:[]});\n            localStorage.setItem('forms',JSON.stringify(forms));\n            setTimeout(()=>{\n                action.payload.history.push(\"/form/\"+activeFormId)\n            },800);\n            return Object.assign({},state,{});\n            break;\n        case 'getForm':\n            return Object.assign({},state,{form:action.payload});\n            break;\n        case 'addItem':\n            \n            return Object.assign({},state,{form:action.payload,});\n            break;\n        case 'getAllForms':\n            let fms=action.payload.forms;\n            localStorage.setItem('forms',JSON.stringify(fms));\n            return Object.assign({},state,{all:fms,loading:false})\n        default:\n            return state;\n            break;\n    }\n}","module.exports = __webpack_public_path__ + \"static/media/loader.d9933c4e.gif\";","import React,{Suspense} from 'react';\nimport './App.css';\n// import {  } from \"react-router\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,useLocation, Redirect\n} from \"react-router-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport {\n  TransitionGroup,\n  CSSTransition\n} from \"react-transition-group\";\nimport 'antd/dist/antd.css';\nimport cookie from 'react-cookies';\n\nconst Landing = React.lazy(()=>import(\"./views/Lading\"));\nconst Login =React.lazy(()=>import(\"./views/Login\"));\nconst FormBase= React.lazy(()=>import('./views/FormsBase'));\nconst LiveForm= React.lazy(()=>import('./views/forms/liveForm'))\nconst Container= React.lazy(()=>import('./views/forms/extracted/container.js'));\n\nfunction App() {\n  return (\n    <Router>\n            <Switch>\n              <Route path=\"*\" exact>\n                <AnimatedRoutes/>\n              </Route>\n              {/* <Route path=\"/forms/:name\"  component={FormBase} /> */}\n              {/* <Redirect from=\"/\" to=\"/landing\" /> */}\n            </Switch>\n       \n \n  </Router>\n  );\n}\n\nconst AuthenRoute=(props)=>{\n return cookie.load('token')?<Route {...props} />:<Redirect to=\"/login\"/>\n}\n\nfunction AnimatedRoutes(){\n  let location = useLocation();\n\n  return(\n    // <TransitionGroup>\n    //       {/*\n    //         This is no different than other usage of\n    //         <CSSTransition>, just make sure to pass\n    //         `location` to `Switch` so it can match\n    //         the old location as it animates out.\n    //       */}\n    //       <CSSTransition\n    //         key={location.key}\n    //         classNames=\"fade\"\n    //         timeout={350}\n    //       >\n            <Suspense fallback={<div className=\"loadScreen\"><img src={require('./assets/img/loader.gif')} /></div>}>\n               <Switch >\n              <Route path=\"/\" exact component={Landing} />\n              <Route path=\"/login\" exact component={Login} />\n              <AuthenRoute path=\"/form\" exact component={FormBase} />\n              <AuthenRoute path=\"/form/:id\" exact component={FormBase} />\n              <Route path=\"/view/:id\" exact component={LiveForm}/>\n              <Route path=\"/v2/:id\" exact component={Container} />\n              {/* <Route path=\"/forms/:name\"  component={FormBase} /> */}\n              {/* <Redirect from=\"/\" to=\"/landing\" /> */}\n            </Switch>\n            </Suspense>\n           \n    //       </CSSTransition>\n    // </TransitionGroup>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {formReducer} from './reducers/formReducers';\n\nconst rootreducers=combineReducers({formReducer})\nexport const store=createStore(rootreducers,composeWithDevTools(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}